<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on gingerBill</title>
    <link>/tags/go/</link>
    <description>Recent content in go on gingerBill</description>
    <language>en-gb</language>
    <lastBuildDate>Mon, 17 Jun 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why People are Angry over Go 1.23 Iterators</title>
      <link>/article/2024/06/17/go-iterator-design/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>/article/2024/06/17/go-iterator-design/</guid>
      <description>NOTE: This is based on, but completely rewritten, from a Twitter post: https://x.com/TheGingerBill/status/1802645945642799423
I recently saw a post on Twitter showing the upcoming Go iterator design for Go 1.23 (August 2024). From what I can gather, many people seem to dislike the design. I wanted to give my thoughts on it as a language designer.
The merged PR for the proposal can be found here: https://github.com/golang/go/issues/61897
It has a in-depth explanation of the design explaining why certain approaches were chosen instead, so I do recommend reading it if you are familiar with Go.</description>
    </item>
    
    <item>
      <title>Multiple Return Values Research</title>
      <link>/article/2021/12/15/multiple-return-values-research/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/12/15/multiple-return-values-research/</guid>
      <description>I have recently been thinking about multiple return values as a concept, and wondering if there has been any kind of literature into the topic of &amp;ldquo;true&amp;rdquo; multiple return values which are not emulated through tuples. My current working hypothesis is that I think I have come to the conclusion (unless there is evidence to the contrary) Odin has invented a new kind of type system, something to the akin of polyadic expressions.</description>
    </item>
    
    <item>
      <title>Untyped Types</title>
      <link>/article/2021/03/07/untyped-types/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/03/07/untyped-types/</guid>
      <description>When I was designing the constant value system in Odin, I wanted literals (especially numbers) to &amp;ldquo;just work&amp;rdquo;. I was inspired by how both Ada1 and Go2 both handled their constant value systems. But this lead me to a realization that there are two general different models of thought when it comes to values in programming languages.
Model-1: Expressions have a type, not all expressions may have a value. Therefore all values must have a type.</description>
    </item>
    
  </channel>
</rss>
